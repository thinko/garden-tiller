---
# Garden-Tiller: Report Generation Playbook
# Generates HTML report from collected validation results

- name: Generate validation report
  hosts: localhost
  connection: local
  gather_facts: false
  tags: [report, all]
  vars:
    structlog_level: info
    firmware_output_dir: "{{ playbook_dir }}/../reports/firmware" # From 03-firmware-update.yaml
    report_dir: "{{ playbook_dir }}/../reports"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"
    today_date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
    report_file: "{{ report_dir }}/lab-report-{{ timestamp }}.html"
  tasks:
    - name: Register report start time
      ansible.builtin.set_fact:
        report_start: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Configure Structlog logger for report generation
      ansible.builtin.debug:
        msg: "Configuring Structlog logger for report generation at level: {{ structlog_level }}"
      run_once: true

    - name: Robustly initialize validation results with comprehensive data merging
      ansible.builtin.set_fact:
        validation_results: "{{ validation_results | default({}) }}"
        total_checks: "{{ total_checks | default(0) }}"
        passed_checks: "{{ passed_checks | default(0) }}"
        failed_checks: "{{ failed_checks | default(0) }}"
        warning_checks: "{{ warning_checks | default(0) }}"
        lab_environment: "{{ lab_environment | default('Garden-Tiller Lab') }}"
      run_once: true

    - name: Debug validation_results structure
      ansible.builtin.debug:
        msg:
          - "validation_results type: {{ validation_results | type_debug }}"
          - "validation_results keys: {{ validation_results.keys() | list if validation_results is mapping else 'Not a mapping' }}"
          - "total_checks: {{ total_checks }}"
          - "passed_checks: {{ passed_checks }}"
          - "failed_checks: {{ failed_checks }}"
      run_once: true

    - name: Load detailed firmware analysis files for each host
      block:
        - name: Find all firmware analysis JSON files
          ansible.builtin.find:
            paths: "{{ firmware_output_dir }}"
            patterns: "*_firmware_analysis.json"
            recurse: no
          register: firmware_analysis_files
          delegate_to: localhost
          run_once: true

        - name: Create a dictionary for detailed firmware results by host
          ansible.builtin.set_fact:
            detailed_firmware_results_by_host: {}
          run_once: true

        - name: Load and process each firmware analysis file
          ansible.builtin.set_fact:
            detailed_firmware_results_by_host: >-
              {{ detailed_firmware_results_by_host | combine({
                   (item.path | basename | regex_replace('_firmware_analysis.json$', '')): (lookup('file', item.path) | from_json).host_results[(item.path | basename | regex_replace('_firmware_analysis.json$', ''))]
                 })
              }}
          loop: "{{ firmware_analysis_files.files }}"
          run_once: true
          delegate_to: localhost
          when: firmware_analysis_files.files is defined and firmware_analysis_files.files | length > 0

        - name: Merge detailed firmware results into main validation_results
          ansible.builtin.set_fact:
            validation_results: >-
              {{ validation_results | combine({'firmware': (validation_results.firmware | default({})) | combine({'details_by_host': detailed_firmware_results_by_host | default({})}) }, recursive=True) }}
          run_once: true
          when: detailed_firmware_results_by_host is defined

      rescue:
        - name: Log firmware file loading errors
          ansible.builtin.debug:
            msg: "Some firmware analysis files could not be loaded or parsed - continuing with available data. Error: {{ ansible_failed_result }}"
          run_once: true
    # Note: The global total_checks, passed_checks, failed_checks, warning_checks
    # are already accumulated by individual playbooks. No need to recalculate here
    # unless the logic in those playbooks is insufficient.

    - name: Debug validation results structure
      ansible.builtin.debug:
        msg:
          - "Validation results type: {{ validation_results | type_debug }}"
          - "Validation results is mapping: {{ validation_results is mapping }}"
          - "Validation results content (sample): {{ validation_results | to_nice_json | truncate(1000, True) }}"
          - "Total Checks (Global): {{ total_checks }}"
          - "Passed Checks (Global): {{ passed_checks }}"
          - "Failed Checks (Global): {{ failed_checks }}"
          - "Warning Checks (Global): {{ warning_checks }}"
          - "Firmware details loaded for hosts: {{ validation_results.firmware.details_by_host.keys() if validation_results.firmware.details_by_host is defined else 'None' }}"
      delegate_to: localhost

    - name: Ensure report directory exists
      ansible.builtin.file:
        path: "{{ report_dir }}"
        state: directory
        mode: "0755"


    - name: Generate comprehensive main validation report
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/main-validation-report.html.j2"
        dest: "{{ report_file }}"
        mode: "0644"
      vars:
        report_title: "Garden-Tiller Lab Validation Report"
        generation_timestamp: "{{ report_start }}"
      run_once: true

    - name: Generate specialized network configuration report
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/network-configuration-report.html.j2"
        dest: "{{ report_dir }}/network-config-{{ timestamp }}.html"
        mode: "0644"
      vars:
        generation_timestamp: "{{ report_start }}"
      run_once: true
      when: validation_results.network is defined

    - name: Generate specialized firmware report (if firmware validation was run)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/firmware_report.html.j2"
        dest: "{{ report_dir }}/firmware-validation-{{ timestamp }}.html"
        mode: "0644"
      vars:
        generation_timestamp: "{{ report_start }}"
      run_once: true
      when: validation_results.firmware is defined

    - name: Report generation completed
      ansible.builtin.debug:
        msg: 
          - "=== Report Generation Complete ==="
          - "Main validation report: {{ report_file }}"
          - "Network configuration report: {{ report_dir }}/network-config-{{ timestamp }}.html"
          - "Firmware validation report: {{ report_dir }}/firmware-validation-{{ timestamp }}.html"
          - "Report timestamp: {{ timestamp }}"
          - "All reports saved to: {{ report_dir }}/"
      delegate_to: localhost
      run_once: true
