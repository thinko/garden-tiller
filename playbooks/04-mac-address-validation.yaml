---
# Garden-Tiller: MAC Address Validation Playbook (Garden Shed Enhanced)
# Validates MAC address discovery and network interface mapping using garden_shed data
# Eliminates legacy data collection and uses centralized garden_shed data

- name: MAC Address Validation using Garden Shed Data
  hosts: localhost
  connection: local
  gather_facts: false
  tags: [mac, all]
  vars:
    structlog_level: info
    output_dir: "{{ playbook_dir }}/../reports"
  tasks:
    - name: Register validation start
      ansible.builtin.set_fact:
        mac_validation_start: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Verify garden_shed data is available
      ansible.builtin.fail:
        msg: "Garden Shed data not available. Run data collection playbook first."
      when: garden_shed_data is not defined or mac_address_data is not defined
      run_once: true

    - name: Set up result dictionary for MAC validation
      ansible.builtin.set_fact:
        mac_results: {}
      run_once: true

    - name: Configure Structlog logger for MAC validation
      ansible.builtin.debug:
        msg: "Configuring Structlog logger for MAC validation at level: {{ structlog_level }}"
      run_once: true

    - name: Analyze MAC address data from garden_shed
      ansible.builtin.set_fact:
        mac_analysis: >-
          {%- set analysis = {} -%}
          {%- for host_name in groups['baremetal'] -%}
            {%- if host_name in mac_address_data -%}
              {%- set host_macs = mac_address_data[host_name] -%}
              {%- set mac_list = [] -%}
              {%- set adapter_count = {} -%}
              {%- for mac_entry in host_macs -%}
                {%- set _ = mac_list.append(mac_entry.mac_address) -%}
                {%- set adapter_name = mac_entry.adapter_name -%}
                {%- if adapter_name in adapter_count -%}
                  {%- set _ = adapter_count.update({adapter_name: adapter_count[adapter_name] + 1}) -%}
                {%- else -%}
                  {%- set _ = adapter_count.update({adapter_name: 1}) -%}
                {%- endif -%}
              {%- endfor -%}
              {%- set _ = analysis.update({
                host_name: {
                  'collection_status': 'success',
                  'total_mac_addresses': mac_list | length,
                  'mac_addresses': mac_list,
                  'adapters': adapter_count,
                  'detailed_interfaces': host_macs,
                  'unique_adapters': adapter_count.keys() | list | length
                }
              }) -%}
            {%- elif host_name in garden_shed_data and garden_shed_data[host_name].collection_status == 'failed' -%}
              {%- set _ = analysis.update({
                host_name: {
                  'collection_status': 'failed',
                  'error': garden_shed_data[host_name].get('error', 'Unknown error'),
                  'total_mac_addresses': 0,
                  'mac_addresses': [],
                  'adapters': {},
                  'detailed_interfaces': [],
                  'unique_adapters': 0
                }
              }) -%}
            {%- else -%}
              {%- set _ = analysis.update({
                host_name: {
                  'collection_status': 'no_data',
                  'error': 'No garden_shed data available for this host',
                  'total_mac_addresses': 0,
                  'mac_addresses': [],
                  'adapters': {},
                  'detailed_interfaces': [],
                  'unique_adapters': 0
                }
              }) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ analysis }}

    - name: Display MAC address analysis summary
      ansible.builtin.debug:
        msg:
          - "=== MAC Address Analysis for {{ item.key }} ==="
          - "Collection Status: {{ item.value.collection_status }}"
          - "Total MAC Addresses: {{ item.value.total_mac_addresses }}"
          - "Unique Network Adapters: {{ item.value.unique_adapters }}"
          - "Adapter Breakdown: {{ item.value.adapters }}"
          - "MAC Addresses: {{ item.value.mac_addresses[:5] }}{{ '...' if item.value.mac_addresses | length > 5 else '' }}"
          - "{{ 'Error: ' + item.value.error if item.value.collection_status != 'success' else '' }}"
      loop: "{{ mac_analysis | dict2items }}"

    - name: Validate MAC address format and uniqueness
      ansible.builtin.set_fact:
        mac_validation_results: >-
          {%- set validation_results = {} -%}
          {%- for host_name, host_data in mac_analysis.items() -%}
            {%- set validation = {
              'format_valid': true,
              'all_unique': true,
              'total_count': host_data.total_mac_addresses,
              'invalid_formats': [],
              'duplicate_macs': [],
              'valid_count': 0
            } -%}
            {%- if host_data.collection_status == 'success' -%}
              {%- set seen_macs = [] -%}
              {%- for mac in host_data.mac_addresses -%}
                {%- if mac | regex_search('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$') -%}
                  {%- set _ = validation.update({'valid_count': validation.valid_count + 1}) -%}
                {%- else -%}
                  {%- set _ = validation.invalid_formats.append(mac) -%}
                  {%- set _ = validation.update({'format_valid': false}) -%}
                {%- endif -%}
                {%- if mac in seen_macs -%}
                  {%- set _ = validation.duplicate_macs.append(mac) -%}
                  {%- set _ = validation.update({'all_unique': false}) -%}
                {%- else -%}
                  {%- set _ = seen_macs.append(mac) -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
            {%- set _ = validation_results.update({host_name: validation}) -%}
          {%- endfor -%}
          {{ validation_results }}

    - name: Display MAC validation results
      ansible.builtin.debug:
        msg:
          - "=== MAC Validation Results for {{ item.key }} ==="
          - "Valid Format: {{ 'PASS' if item.value.format_valid else 'FAIL' }}"
          - "All Unique: {{ 'PASS' if item.value.all_unique else 'FAIL' }}"
          - "Valid Count: {{ item.value.valid_count }}/{{ item.value.total_count }}"
          - "{{ 'Invalid Formats: ' + (item.value.invalid_formats | join(', ')) if item.value.invalid_formats | length > 0 else '' }}"
          - "{{ 'Duplicate MACs: ' + (item.value.duplicate_macs | join(', ')) if item.value.duplicate_macs | length > 0 else '' }}"
      loop: "{{ mac_validation_results | dict2items }}"

    - name: Generate detailed MAC address report
      ansible.builtin.set_fact:
        mac_detailed_report: >-
          {%- set report = {} -%}
          {%- for host_name in groups['baremetal'] -%}
            {%- if host_name in mac_analysis and mac_analysis[host_name].collection_status == 'success' -%}
              {%- set host_report = [] -%}
              {%- for interface in mac_analysis[host_name].detailed_interfaces -%}
                {%- set interface_report = {
                  'mac_address': interface.mac_address,
                  'adapter_name': interface.adapter_name,
                  'port_name': interface.port_name,
                  'status': interface.status,
                  'ipv4_addresses': interface.ipv4_addresses,
                  'ipv6_addresses': interface.ipv6_addresses
                } -%}
                {%- set _ = host_report.append(interface_report) -%}
              {%- endfor -%}
              {%- set _ = report.update({host_name: host_report}) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ report }}

    - name: Save MAC address validation results
      ansible.builtin.set_fact:
        mac_results: >-
          {{ mac_results | combine({
            'analysis': mac_analysis,
            'validation': mac_validation_results,
            'detailed_report': mac_detailed_report,
            'summary': {
              'total_hosts': groups['baremetal'] | length,
              'successful_collections': (mac_analysis | dict2items | selectattr('value.collection_status', 'equalto', 'success') | list | length),
              'failed_collections': (mac_analysis | dict2items | selectattr('value.collection_status', 'ne', 'success') | list | length),
              'total_mac_addresses': (mac_analysis | dict2items | map(attribute='value.total_mac_addresses') | sum),
              'hosts_with_valid_macs': (mac_validation_results | dict2items | selectattr('value.format_valid') | list | length),
              'hosts_with_unique_macs': (mac_validation_results | dict2items | selectattr('value.all_unique') | list | length)
            }
          }) }}

    - name: Register validation end
      ansible.builtin.set_fact:
        mac_validation_end: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Store MAC address validation results in global validation_results
      ansible.builtin.set_fact:
        validation_results: >-
          {{ (validation_results | default({}) if validation_results is mapping else {}) | combine({
            'mac_addresses': {
              'start_time': mac_validation_start,
              'end_time': mac_validation_end,
              'data_source': 'garden_shed',
              'results': mac_results,
              'summary': mac_results.summary
            }
          }) }}
      delegate_to: localhost
      run_once: true

    - name: Update check counters for final report
      ansible.builtin.set_fact:
        total_checks: >-
          {{ total_checks | default(0) | int + groups['baremetal'] | length + 2 }}
        passed_checks: >-
          {{ passed_checks | default(0) | int + 
             mac_results.summary.hosts_with_valid_macs | default(0) +
             mac_results.summary.hosts_with_unique_macs | default(0)
          }}
        failed_checks: >-
          {{ failed_checks | default(0) | int + 
             (groups['baremetal'] | length - mac_results.summary.hosts_with_valid_macs | default(0)) +
             (groups['baremetal'] | length - mac_results.summary.hosts_with_unique_macs | default(0))
          }}
      delegate_to: localhost
      run_once: true

    - name: Display MAC address validation summary
      ansible.builtin.debug:
        msg:
          - "=== MAC Address Validation Summary (Garden Shed Enhanced) ==="
          - "Total hosts: {{ groups['baremetal'] | length }}"
          - "Successful collections: {{ mac_results.summary.successful_collections }}"
          - "Failed collections: {{ mac_results.summary.failed_collections }}"
          - "Total MAC addresses discovered: {{ mac_results.summary.total_mac_addresses }}"
          - "Hosts with valid MAC formats: {{ mac_results.summary.hosts_with_valid_macs }}"
          - "Hosts with unique MAC addresses: {{ mac_results.summary.hosts_with_unique_macs }}"
          - "Data source: Garden Shed centralized collection"
      run_once: true
