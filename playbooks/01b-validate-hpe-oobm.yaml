---
# Garden-Tiller: HPE iLO Out-of-Band Management Validation Playbook
# Uses HPE proliantutils for advanced validation of HPE servers

- name: Verify HPE iLO configuration and details
  hosts: localhost
  connection: local
  gather_facts: true
  tags: [oobm, hpe, ilo, all]
  vars:
    structlog_level: info
    resilient_policy:
      retry_count: 3
      retry_delay: 2
      circuit_threshold: 5
    verify_ssl: false # Default to not verify SSL certificates
  tasks:
    - name: Register validation start
      ansible.builtin.set_fact:
        hpe_oobm_validation_start: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Set up result dictionary for HPE iLO validation
      ansible.builtin.set_fact:
        hpe_oobm_results: {}
      run_once: true

    - name: Debug - Verify hpe_oobm_results initialization
      ansible.builtin.debug:
        msg:
          - "hpe_oobm_results type: {{ hpe_oobm_results | type_debug }}"
          - "hpe_oobm_results value: {{ hpe_oobm_results }}"
      run_once: true

    - name: Configure Structlog logger for HPE iLO validation
      ansible.builtin.debug:
        msg: "Configuring Structlog logger for HPE iLO validation at level: {{ structlog_level }}"
      run_once: true

    # Identify HPE iLO systems
    - name: Get HPE iLO hosts
      ansible.builtin.set_fact:
        hpe_hosts: "{{ groups['baremetal'] | map('extract', hostvars) | selectattr('bmc_type', 'equalto', 'ilo') | map(attribute='inventory_hostname') | list }}"
      run_once: true

    - name: Skip playbook if no HPE iLO hosts found
      ansible.builtin.meta: end_play
      when: hpe_hosts | length == 0
      run_once: true

    - name: Display HPE hosts count
      ansible.builtin.debug:
        msg: "Found {{ hpe_hosts | length }} HPE iLO host(s) to validate"
      run_once: true

    # Collect HPE iLO information using our Python module with robust error handling
    - name: Collect detailed iLO information
      block:
        - name: Debug HPE hosts before script execution
          ansible.builtin.debug:
            msg: "About to execute script for hosts: {{ hpe_hosts }}"

        - name: Run iLO info collection script with Redfish API (enhanced reliability)
          ansible.builtin.shell: >
            python3 {{ playbook_dir }}/../library/ilo_utils.py  {{ hostvars[item].bmc_address }}
            {{ hostvars[item].bmc_username }}
            {{ hostvars[item].bmc_password }}
            get_all_details
            --redfish
          args:
            executable: /bin/bash
          register: ilo_info_results
          loop: "{{ hpe_hosts }}"
          ignore_errors: true

        - name: Debug script results
          ansible.builtin.debug:
            msg:
              - "Script execution results:"
              - "Total results: {{ ilo_info_results.results | length }}"
              - "Results: {{ ilo_info_results.results }}"

        - name: Process iLO info results directly
          ansible.builtin.set_fact:
            hpe_oobm_results: >-
              {%- set results_dict = {} -%}
              {%- for result in ilo_info_results.results -%}
                {%- set host_name = hpe_hosts[loop.index0] -%}
                {%- set parsed_result = result.stdout | from_json if result.rc == 0 and result.stdout | length > 0 else {} -%}
                {%- set _ = results_dict.update({
                  host_name: {
                    'connection_status': 'success' if result.rc == 0 and 'error' not in parsed_result else 'failed',
                    'server_details': {
                      'product_name': parsed_result.get('product_name', 'Unknown'),
                      'host_uuid': parsed_result.get('host_uuid', 'Unknown'),
                      'power_status': parsed_result.get('power_status', 'Unknown'),
                      'firmware_version': parsed_result.get('firmware_version', 'Unknown')
                    },
                    'health_status': parsed_result.get('health_status', {
                      'system_health': 'Unknown',
                      'processor': 'Unknown', 
                      'memory': 'Unknown',
                      'storage': 'Unknown'
                    }),
                    'boot_settings': parsed_result.get('boot_settings', {
                      'one_time_boot': 'Unknown',
                      'persistent_boot': 'Unknown'
                    }),
                    'network_adapters': parsed_result.get('network_adapters', []),
                    'network_summary': {
                      'adapter_count': parsed_result.get('network_adapter_count', 0),
                      'adapters_with_mac': (parsed_result.get('network_adapters', []) | selectattr('mac_address', 'defined') | list | length)
                    },
                    'collection_timestamp': ansible_date_time.iso8601,
                    'bmc_address': hostvars[host_name].bmc_address | default('Unknown'),
                    'bmc_type': hostvars[host_name].bmc_type | default('ilo'),
                    'hostname': host_name,
                    'error_details': {
                      'message': parsed_result.get('error', 'No errors') if result.rc == 0 else 'Command execution failed',
                      'exit_code': result.rc,
                      'stdout_preview': result.stdout[:200] + '...' if result.stdout | length > 200 else result.stdout,
                      'stderr_preview': result.stderr[:200] + '...' if result.stderr | length > 200 else result.stderr,
                      'parsed_error': 'json_parse_error' if result.rc == 0 and result.stdout | length > 0 and 'error' in parsed_result else 'none'
                    }
                  }
                }) -%}
              {%- endfor -%}
              {{ results_dict }}

        - name: Debug processed results
          ansible.builtin.debug:
            var: hpe_oobm_results
          when: ansible_verbosity >= 2
      rescue:
        - name: Handle complete iLO collection failure
          ansible.builtin.set_fact:
            hpe_oobm_results: "{{ hpe_oobm_results | default({}) }}"

        - name: Populate failed host entries
          ansible.builtin.set_fact:
            hpe_oobm_results: >-
              {{ hpe_oobm_results | combine({
                item: {
                  'connection_status': 'failed',
                  'server_details': {
                    'product_name': 'Collection Error',
                    'host_uuid': 'Collection Error',
                    'power_status': 'Collection Error',
                    'firmware_version': 'Collection Error'
                  },
                  'health_status': {
                    'system_health': 'Collection Error',
                    'processor': 'Collection Error',
                    'memory': 'Collection Error',
                    'storage': 'Collection Error'
                  },
                  'boot_settings': {
                    'one_time_boot': 'Collection Error',
                    'persistent_boot': 'Collection Error'
                  },
                  'network_adapters': [],
                  'network_summary': {
                    'adapter_count': 0,
                    'adapters_with_mac': 0
                  },
                  'collection_timestamp': ansible_date_time.iso8601,
                  'bmc_address': hostvars[item].bmc_address | default('Unknown'),
                  'bmc_type': hostvars[item].bmc_type | default('ilo'),
                  'hostname': item,
                  'error_details': {
                    'message': 'Complete collection failure in rescue block',
                    'exit_code': -1,
                    'stdout_preview': '',
                    'stderr_preview': '',
                    'parsed_error': 'ansible_rescue_block'
                  }
                }
              }) }}
          loop: "{{ hpe_hosts }}"

        - name: Log complete iLO info collection failure
          ansible.builtin.debug:
            msg: "Complete failure in iLO collection - populated error entries for all HPE hosts"
          run_once: true

    # Debug: Show current hpe_oobm_results structure
    - name: Debug - Show hpe_oobm_results structure
      ansible.builtin.debug:
        msg: 
          - "hpe_oobm_results keys: {{ hpe_oobm_results.keys() | list if hpe_oobm_results is mapping else 'Not a dictionary' }}"
          - "hpe_hosts: {{ hpe_hosts }}"
          - "hpe_oobm_results type: {{ hpe_oobm_results | type_debug }}"
      run_once: true

    # Validate server power status
    - name: Validate server power status
      ansible.builtin.set_fact:
        hpe_oobm_results: "{{ hpe_oobm_results | combine({
            item: (hpe_oobm_results[item] | default({}) | combine({
              'power_validation': {
                'status': 'pass' if (hpe_oobm_results[item] | default({})).get('server_details', {}).get('power_status', 'Unknown') in ['ON', 'OFF'] else 'warn',
                'value': (hpe_oobm_results[item] | default({})).get('server_details', {}).get('power_status', 'Unknown'),
                'message': 'Power status available' if (hpe_oobm_results[item] | default({})).get('server_details', {}).get('power_status', 'Unknown') in ['ON', 'OFF'] else 'Power status unknown or invalid',
                'expected': 'ON or OFF',
                'validation_timestamp': ansible_date_time.iso8601
              }
            }))
          }) }}"
      loop: "{{ hpe_hosts }}"
      when: item in hpe_oobm_results

    # Validate firmware version
    - name: Validate firmware version
      ansible.builtin.set_fact:
        hpe_oobm_results: "{{ hpe_oobm_results | combine({
            item: (hpe_oobm_results[item] | default({}) | combine({
              'firmware_validation': {
                'status': 'pass' if ((hpe_oobm_results[item] | default({})).get('server_details', {}).get('firmware_version', 'Unknown') != 'Unknown' and 'Unknown' not in (hpe_oobm_results[item] | default({})).get('server_details', {}).get('firmware_version', 'Unknown')) else 'warn',
                'current_version': (hpe_oobm_results[item] | default({})).get('server_details', {}).get('firmware_version', 'Unknown'),
                'minimum_version': (hostvars[item].min_ilo_firmware | default('2.0')) if item in hostvars else '2.0',
                'message': 'Firmware version detected' if ((hpe_oobm_results[item] | default({})).get('server_details', {}).get('firmware_version', 'Unknown') != 'Unknown' and 'Unknown' not in (hpe_oobm_results[item] | default({})).get('server_details', {}).get('firmware_version', 'Unknown')) else 'Firmware version unavailable',
                'validation_timestamp': ansible_date_time.iso8601
              }
            }))
          }) }}"
      loop: "{{ hpe_hosts }}"
      when: item in hpe_oobm_results

    # Validate health status
    - name: Validate server health status
      ansible.builtin.set_fact:
        hpe_oobm_results: "{{ hpe_oobm_results | combine({
            item: (hpe_oobm_results[item] | default({}) | combine({
              'health_validation': {
                'status': 'pass' if (hpe_oobm_results[item] | default({})).get('health_status', {}).get('system_health', 'Unknown') in ['OK', 'Good', 'Normal'] else ('fail' if (hpe_oobm_results[item] | default({})).get('health_status', {}).get('system_health', 'Unknown') in ['Critical', 'Failed', 'Error'] else 'warn'),
                'system_health': (hpe_oobm_results[item] | default({})).get('health_status', {}).get('system_health', 'Unknown'),
                'processor_health': (hpe_oobm_results[item] | default({})).get('health_status', {}).get('processor', 'Unknown'),
                'memory_health': (hpe_oobm_results[item] | default({})).get('health_status', {}).get('memory', 'Unknown'),
                'storage_health': (hpe_oobm_results[item] | default({})).get('health_status', {}).get('storage', 'Unknown'),
                'message': 'System health is ' + ((hpe_oobm_results[item] | default({})).get('health_status', {}).get('system_health', 'Unknown')),
                'validation_timestamp': ansible_date_time.iso8601
              }
            }))
          }) }}"
      loop: "{{ hpe_hosts }}"
      when: item in hpe_oobm_results

    # Validate boot settings
    - name: Validate boot settings
      ansible.builtin.set_fact:
        hpe_oobm_results: "{{ hpe_oobm_results | combine({
            item: (hpe_oobm_results[item] | default({}) | combine({
              'boot_validation': {
                'status': 'pass' if ((hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('one_time_boot', 'Unknown') != 'Unknown' or (hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('persistent_boot', 'Unknown') != 'Unknown') else 'warn',
                'one_time_boot': (hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('one_time_boot', 'Unknown'),
                'persistent_boot': (hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('persistent_boot', 'Unknown'),
                'message': 'Boot settings available' if ((hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('one_time_boot', 'Unknown') != 'Unknown' or (hpe_oobm_results[item] | default({})).get('boot_settings', {}).get('persistent_boot', 'Unknown') != 'Unknown') else 'Boot settings unavailable',
                'validation_timestamp': ansible_date_time.iso8601
              }
            }))
          }) }}"
      loop: "{{ hpe_hosts }}"
      when: item in hpe_oobm_results

    # Validate network adapters
    - name: Validate network adapters
      ansible.builtin.set_fact:
        hpe_oobm_results: "{{ hpe_oobm_results | combine({
            item: (hpe_oobm_results[item] | default({}) | combine({
              'network_validation': {
                'status': 'pass' if ((hpe_oobm_results[item] | default({})).get('network_adapters', []) | length > 0) else 'warn',
                'adapter_count': (hpe_oobm_results[item] | default({})).get('network_adapters', []) | length,
                'adapters': (hpe_oobm_results[item] | default({})).get('network_adapters', []),
                'message': ((hpe_oobm_results[item] | default({})).get('network_adapters', []) | length | string) + ' network adapters found' if ((hpe_oobm_results[item] | default({})).get('network_adapters', []) | length > 0) else 'No network adapters detected',
                'validation_timestamp': ansible_date_time.iso8601
              }
            }))
          }) }}"
      loop: "{{ hpe_hosts }}"
      when: item in hpe_oobm_results

    # Save validation results
    - name: Register validation end
      ansible.builtin.set_fact:
        hpe_oobm_validation_end: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Debug - Verify hpe_oobm_results before storage
      ansible.builtin.debug:
        msg:
          - "hpe_oobm_results type: {{ hpe_oobm_results | type_debug }}"
          - "hpe_oobm_results is mapping: {{ hpe_oobm_results is mapping }}"
          - "hpe_oobm_results content: {{ hpe_oobm_results }}"
      run_once: true



    - name: Calculate summary statistics
      ansible.builtin.set_fact:
        hpe_success_count: >-
          {{ (hpe_oobm_results | dict2items |
            selectattr('value.connection_status', 'defined') |
            selectattr('value.connection_status', 'equalto', 'success') | list | length)
          if hpe_oobm_results is mapping else 0 }}
        hpe_power_passed: >-
          {{ (hpe_oobm_results | dict2items |
              selectattr('value.power_validation.status', 'defined') |
              selectattr('value.power_validation.status', 'equalto', 'pass') | list | length)
             if hpe_oobm_results is mapping else 0 }}
        hpe_firmware_passed: >-
          {{ (hpe_oobm_results | dict2items |
              selectattr('value.firmware_validation.status', 'defined') |
              selectattr('value.firmware_validation.status', 'equalto', 'pass') | list | length)
             if hpe_oobm_results is mapping else 0 }}
        hpe_health_passed: >-
          {{ (hpe_oobm_results | dict2items |
              selectattr('value.health_validation.status', 'defined') |
              selectattr('value.health_validation.status', 'equalto', 'pass') | list | length)
             if hpe_oobm_results is mapping else 0 }}
        hpe_boot_passed: >-
          {{ (hpe_oobm_results | dict2items |
              selectattr('value.boot_validation.status', 'defined') |
              selectattr('value.boot_validation.status', 'equalto', 'pass') | list | length)
             if hpe_oobm_results is mapping else 0 }}
        hpe_network_passed: >-
          {{ (hpe_oobm_results | dict2items |
              selectattr('value.network_validation.status', 'defined') |
              selectattr('value.network_validation.status', 'equalto', 'pass') | list | length)
             if hpe_oobm_results is mapping else 0 }}
      delegate_to: localhost
      run_once: true

    - name: Store HPE iLO validation results
      ansible.builtin.set_fact:
        validation_results: >-
          {{ (validation_results | default({}) if validation_results is mapping else {}) | combine({
            'hpe_oobm': {
              'start_time': hpe_oobm_validation_start,
              'end_time': hpe_oobm_validation_end,
              'results': hpe_oobm_results,
              'summary': {
                'total': hpe_hosts | length,
                'connection_success': hpe_success_count | int,
                'power_passed': hpe_power_passed | int,
                'firmware_passed': hpe_firmware_passed | int,
                'health_passed': hpe_health_passed | int,
                'boot_passed': hpe_boot_passed | int,
                'network_passed': hpe_network_passed | int
              }
            }
          }) }}
      delegate_to: localhost
      run_once: true

    # Update check counters for final report  
    - name: Update check counters
      ansible.builtin.set_fact:
        total_checks: "{{ total_checks | default(0) | int + (hpe_hosts | length * 5) }}"
        passed_checks: >-
          {{ passed_checks | default(0) | int +
             hpe_power_passed | int +
             hpe_firmware_passed | int +
             hpe_health_passed | int +
             hpe_boot_passed | int +
             hpe_network_passed | int
          }}
        failed_checks: >-
          {{ failed_checks | default(0) | int + ((hpe_hosts | length * 5) -
             hpe_power_passed | int -
             hpe_firmware_passed | int -
             hpe_health_passed | int -
             hpe_boot_passed | int -
             hpe_network_passed | int)
          }}
      delegate_to: localhost
      run_once: true
