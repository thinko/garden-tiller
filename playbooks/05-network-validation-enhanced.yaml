---
# Garden-Tiller: Network Validation Playbook with LACP Testing
# Integrates with the LACP validation test script for comprehensive network testing

- name: Network Validation with LACP Testing
  hosts: localhost
  connection: local
  gather_facts: true
  tags: [network, lacp, all]
  vars:
    structlog_level: info
    resilient_policy:
      retry_count: 3
      retry_delay: 5
      circuit_threshold: 5
    lacp_test_script: "{{ playbook_dir }}/../scripts/lacp_validation_test.py"
    results_output_dir: "{{ playbook_dir }}/../reports"
    clean_boot_mode: true
    test_all_permutations: true
  tasks:
    - name: Register validation start
      ansible.builtin.set_fact:
        network_validation_start: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Set up result dictionary for network validation
      ansible.builtin.set_fact:
        network_results: "{{ network_results | default({}) if network_results is mapping else {} }}"
      run_once: true

    - name: Configure Structlog logger for network validation
      ansible.builtin.debug:
        msg: "Configuring Structlog logger for network validation at level: {{ structlog_level }}"
      run_once: true

    - name: Check prerequisites
      block:
        - name: Verify we have baremetal hosts
          ansible.builtin.fail:
            msg: "No baremetal hosts found in inventory"
          when: groups['baremetal'] | default([]) | length == 0

        - name: Check if LACP test script exists
          ansible.builtin.stat:
            path: "{{ lacp_test_script }}"
          register: script_stat

        - name: Fail if LACP test script not found
          ansible.builtin.fail:
            msg: "LACP test script not found at {{ lacp_test_script }}"
          when: not script_stat.stat.exists

        - name: Ensure results output directory exists
          ansible.builtin.file:
            path: "{{ results_output_dir }}"
            state: directory
            mode: '0755'

        - name: Check if running as root
          ansible.builtin.command: id -u
          register: user_id
          changed_when: false

        - name: Warn if not running as root
          ansible.builtin.debug:
            msg: "WARNING: LACP tests require root privileges. Some tests may fail."
          when: user_id.stdout != "0"

    - name: Pre-test network discovery
      block:
        - name: Discover current network interfaces
          ansible.builtin.shell: |
            ip link show | grep -E '^[0-9]+:' | awk -F': ' '{print $2}' | cut -d'@' -f1 | grep -v '^lo$'
          register: current_interfaces
          changed_when: false

        - name: Get interface details
          ansible.builtin.shell: |
            for iface in {{ current_interfaces.stdout_lines | join(' ') }}; do
              if [[ ! "$iface" =~ ^(lo|docker|br-|virbr|veth|bond|team) ]]; then
                echo "Interface: $iface"
                echo "  MAC: $(cat /sys/class/net/$iface/address 2>/dev/null || echo 'unknown')"
                echo "  State: $(cat /sys/class/net/$iface/operstate 2>/dev/null || echo 'unknown')"
                if command -v ethtool >/dev/null 2>&1; then
                  speed=$(ethtool "$iface" 2>/dev/null | grep Speed: | awk '{print $2}' || echo 'unknown')
                  echo "  Speed: $speed"
                fi
                echo "---"
              fi
            done
          register: interface_details
          changed_when: false
          ignore_errors: true

        - name: Store discovered interfaces
          ansible.builtin.set_fact:
            discovered_interfaces: "{{ interface_details.stdout }}"

    # Run LACP validation tests for each baremetal host
    - name: Run LACP validation tests for baremetal hosts
      block:
        - name: Run LACP validation test script
          ansible.builtin.command:
            cmd: >
              python3 {{ lacp_test_script }}
              --inventory {{ inventory_file }}
              --output {{ results_output_dir }}/lacp_results_{{ item }}_{{ ansible_date_time.epoch }}.json
              --verbose
          args:
            chdir: "{{ playbook_dir }}/.."
          register: lacp_test_results
          loop: "{{ groups['baremetal'] }}"
          delegate_to: "{{ item }}"
          ignore_errors: true
          when: ansible_connection != 'local'

        - name: Process LACP test results
          ansible.builtin.set_fact:
            network_results: >-
              {{ network_results | combine({
                  item.item: {
                    'lacp_test_success': not item.failed,
                    'lacp_test_output': item.stdout if not item.failed else '',
                    'lacp_test_error': item.stderr if item.failed else '',
                    'test_timestamp': ansible_date_time.iso8601
                  }
                }) 
              }}
          loop: "{{ lacp_test_results.results }}"
          when: lacp_test_results.results is defined

    # Alternative: Run tests locally if we can't delegate
    - name: Run local LACP validation test (fallback)
      block:
        - name: Run LACP validation test locally
          ansible.builtin.command:
            cmd: >
              python3 {{ lacp_test_script }}
              --inventory {{ inventory_file }}
              --output {{ results_output_dir }}/lacp_results_local_{{ ansible_date_time.epoch }}.json
              --verbose
          args:
            chdir: "{{ playbook_dir }}/.."
          register: local_lacp_test
          ignore_errors: true

        - name: Process local LACP test results
          ansible.builtin.set_fact:
            network_results: >-
              {{ network_results | combine({
                  'localhost': {
                    'lacp_test_success': not local_lacp_test.failed,
                    'lacp_test_output': local_lacp_test.stdout if not local_lacp_test.failed else '',
                    'lacp_test_error': local_lacp_test.stderr if local_lacp_test.failed else '',
                    'test_timestamp': ansible_date_time.iso8601
                  }
                }) 
              }}
      when: ansible_connection == 'local' or network_results | length == 0

    # Basic network connectivity tests
    - name: Basic network connectivity validation
      block:
        - name: Test network connectivity between hosts
          ansible.builtin.shell: |
            for host in {{ groups['baremetal'] | join(' ') }}; do
              bmc_addr="{{ hostvars[host]['bmc_address'] | default('') }}"
              if [[ -n "$bmc_addr" ]]; then
                echo "Testing connectivity to BMC $bmc_addr for host $host"
                if ping -c 3 -W 5 "$bmc_addr" >/dev/null 2>&1; then
                  echo "  SUCCESS: BMC $bmc_addr is reachable"
                else
                  echo "  FAILED: BMC $bmc_addr is not reachable"
                fi
              fi
            done
          register: connectivity_test
          changed_when: false

        - name: Test switch connectivity (if switch info available)
          ansible.builtin.shell: |
            {% for host in groups['baremetal'] %}
            {% if hostvars[host].get('switch_ip') %}
            echo "Testing switch connectivity for {{ host }}: {{ hostvars[host]['switch_ip'] }}"
            if ping -c 3 -W 5 "{{ hostvars[host]['switch_ip'] }}" >/dev/null 2>&1; then
              echo "  SUCCESS: Switch {{ hostvars[host]['switch_ip'] }} is reachable"
            else
              echo "  FAILED: Switch {{ hostvars[host]['switch_ip'] }} is not reachable"
            fi
            {% endif %}
            {% endfor %}
          register: switch_connectivity_test
          changed_when: false
          ignore_errors: true

    # VLAN and bonding configuration validation
    - name: Validate existing network configuration
      block:
        - name: Check for existing bonds
          ansible.builtin.shell: |
            if [[ -d /proc/net/bonding ]]; then
              echo "Existing bond interfaces:"
              ls -1 /proc/net/bonding/ 2>/dev/null || echo "No existing bonds"
            else
              echo "Bonding module not loaded or no bonds configured"
            fi
          register: existing_bonds
          changed_when: false

        - name: Check VLAN configuration
          ansible.builtin.shell: |
            echo "VLAN interfaces:"
            ip link show type vlan 2>/dev/null || echo "No VLAN interfaces found"
            echo "---"
            echo "Bridge interfaces:"
            ip link show type bridge 2>/dev/null || echo "No bridge interfaces found"
          register: vlan_config
          changed_when: false

        - name: Check for LACP-related kernel modules
          ansible.builtin.shell: |
            echo "Network-related kernel modules:"
            lsmod | grep -E "(bonding|8021q|bridge)" || echo "No relevant modules loaded"
          register: kernel_modules
          changed_when: false

    # Network performance testing
    - name: Network performance validation
      block:
        - name: Test MTU settings
          ansible.builtin.shell: |
            echo "MTU settings for active interfaces:"
            for iface in $(ip link show up | grep -E '^[0-9]+:' | awk -F': ' '{print $2}' | cut -d'@' -f1); do
              if [[ ! "$iface" =~ ^(lo|docker|br-|virbr|veth) ]]; then
                mtu=$(cat /sys/class/net/$iface/mtu 2>/dev/null || echo 'unknown')
                echo "  $iface: $mtu"
              fi
            done
          register: mtu_test
          changed_when: false

        - name: Check for jumbo frames support
          ansible.builtin.shell: |
            echo "Checking jumbo frame support:"
            for iface in $(ip link show up | grep -E '^[0-9]+:' | awk -F': ' '{print $2}' | cut -d'@' -f1); do
              if [[ ! "$iface" =~ ^(lo|docker|br-|virbr|veth) ]] && command -v ethtool >/dev/null 2>&1; then
                max_mtu=$(ethtool -i "$iface" 2>/dev/null | grep 'supports-priv-flags\|max.*mtu' || echo 'unknown')
                echo "  $iface: $max_mtu"
              fi
            done
          register: jumbo_frames_test
          changed_when: false
          ignore_errors: true

    # Save validation results
    - name: Register validation end
      ansible.builtin.set_fact:
        network_validation_end: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
      run_once: true

    - name: Consolidate network validation results
      ansible.builtin.set_fact:
        network_results: >-
          {{ network_results | combine({
              'validation_metadata': {
                'start_time': network_validation_start,
                'end_time': network_validation_end,
                'discovered_interfaces': discovered_interfaces,
                'connectivity_test': connectivity_test.stdout,
                'switch_connectivity': switch_connectivity_test.stdout | default(''),
                'existing_bonds': existing_bonds.stdout,
                'vlan_config': vlan_config.stdout,
                'kernel_modules': kernel_modules.stdout,
                'mtu_settings': mtu_test.stdout,
                'jumbo_frames': jumbo_frames_test.stdout | default('')
              }
            }) 
          }}

    - name: Store network validation results
      ansible.builtin.set_fact:
        validation_results: >-
          {{ (validation_results | default({}) if validation_results is mapping else {}) | 
             combine({
               'network': {
                 'start_time': network_validation_start,
                 'end_time': network_validation_end,
                 'results': network_results,
                 'summary': {
                   'total_hosts': groups['baremetal'] | length,
                   'lacp_tests_run': network_results | dict2items | 
                                   selectattr('value.lacp_test_success', 'defined') | 
                                   list | length,
                   'lacp_tests_successful': network_results | dict2items | 
                                          selectattr('value.lacp_test_success', 'defined') | 
                                          selectattr('value.lacp_test_success') | 
                                          list | length
                 }
               }
             }) 
          }}
      delegate_to: localhost
      run_once: true

    # Update check counters for final report
    - name: Update check counters
      ansible.builtin.set_fact:
        total_checks: >-
          {{ total_checks | default(0) | int + groups['baremetal'] | length + 5 }}
        passed_checks: >-
          {{ passed_checks | default(0) | int + 
             (network_results | dict2items | 
              selectattr('value.lacp_test_success', 'defined') | 
              selectattr('value.lacp_test_success') | 
              list | length) + 2 
          }}
        failed_checks: >-
          {{ failed_checks | default(0) | int + 
             (groups['baremetal'] | length - 
              (network_results | dict2items | 
               selectattr('value.lacp_test_success', 'defined') | 
               selectattr('value.lacp_test_success') | 
               list | length)) + 3 
          }}
      delegate_to: localhost
      run_once: true

    - name: Display network validation summary
      ansible.builtin.debug:
        msg:
          - "Network Validation Summary:"
          - "Total hosts tested: {{ groups['baremetal'] | length }}"
          - "LACP tests run: {{ validation_results.network.summary.lacp_tests_run }}"
          - "LACP tests successful: {{ validation_results.network.summary.lacp_tests_successful }}"
          - "Results saved to: {{ results_output_dir }}"
      run_once: true
